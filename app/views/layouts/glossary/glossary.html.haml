- @room = 'glossary'
- content_for :parent do
  #glossary-search
    #div{:style=>"background-color:#F7F7E4; padding-top:15px; top:0px;position:relative;"}
      %div{:style=>"position:fixed;margin-top:65px; top:0px; z-index:1;padding-top:2px;background-color:#F7F7E4;"}
        #glossary-search-box
          %h3 Search the Mawhiba glossary
          = form_tag glossary_sentences_path, :method => 'get', :id => "sentence_search_form" do
            %p
              = label_tag :sentence_search, 'Enter part of a sentence to search', :class => 'infield'
              =# text_field_tag :sentence_search, params[:sentence_search]
              = autocomplete_field_tag :sentence_search,params[:sentence_search],autocomplete_sentence_text_glossary_sentences_path
              = submit_tag "Search", :name => nil
          %ul#glossary-nav
            %li
              - if params[:action] == 'recent'
                %em.active Recently updated
              - else
                = link_to 'Recently updated', recent_glossary_sentences_path(:sentence_search => params[:sentence_search])         
            %li
              - if params[:action] == 'flagged'
                %em.active Flagged
              - else
                = link_to 'Flagged', flagged_glossary_sentences_path(:sentence_search => params[:sentence_search])
            %li
              - if can? :create, Sentence
                = link_to 'Add a sentence', new_glossary_sentence_path
              - else
                %em.disabled Add a sentence
    #glossary-sentences{:style=> " position:relative; top:100px;"}
      %ul
        - if @sentences.empty?
          - if params[:sentence_search]
            %em No matching sentence found
        - else
          - @sentences.entries.each do |sentence|
            %li
              = language_flag_for(sentence)
              = link_to truncate(sentence.text, :length => 40, :omission => '...'), glossary_sentence_path(sentence,:sentence_search => params[:sentence_search])

- content_for :main do
  #glossary-page
    = yield
= render :file => 'layouts/application'
